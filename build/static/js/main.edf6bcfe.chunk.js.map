{"version":3,"sources":["components/Player.js","components/VideoSelector.js","components/SubtitlesSelector.js","App.js","reportWebVitals.js","index.js"],"names":["Player","forwardRef","ref","source","subtitles","onTimeUpdate","onPlay","onPause","onSeek","player","useRef","useEffect","current","load","addEventListener","event","currentTime","useImperativeHandle","play","pause","seek","time","controls","src","className","map","url","label","kind","srclang","VideoSelector","onSelect","onChange","URL","createObjectURL","target","files","type","accept","SubtitlesSelector","a","file","isSrt","name","vttConverter","VTTConverter","getURL","isVTT","reader","FileReader","readAsText","onload","evt","content","result","blob","Blob","filename","split","pop","toLowerCase","App","socket","useState","videoFile","setVideoFile","setSubtitles","emitSeek","emitPlay","emitPause","socketIOClient","on","video","sub","emit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.edf6bcfe.chunk.js","sourcesContent":["import React, { useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\r\n\r\nconst Player = forwardRef(({source, subtitles, onTimeUpdate, onPlay, onPause, onSeek}, ref) => {\r\n\r\n    const player = useRef();\r\n\r\n    useEffect(() => {\r\n        player.current.load();\r\n    }, [source])\r\n\r\n    useEffect(() => {\r\n        player.current.addEventListener('timeupdate', (event) => {\r\n            onTimeUpdate(player.current.currentTime)\r\n        });\r\n\r\n        player.current.addEventListener('play', (event) => {\r\n            onPlay(event)\r\n        })\r\n\r\n        player.current.addEventListener('pause', (event) => {\r\n            onPause(event)\r\n        })\r\n\r\n        player.current.addEventListener('seeked', (event) => {\r\n            onSeek(player.current.currentTime)\r\n        })\r\n    },[])\r\n\r\n    useImperativeHandle(ref, () => ({\r\n\r\n        play: () => {\r\n            player.current.play()\r\n        },\r\n\r\n        pause: () => {\r\n            player.current.pause()\r\n        },\r\n\r\n        seek: (time) => {\r\n            player.current.currentTime = time\r\n        }        \r\n    \r\n      }));\r\n\r\n    return (\r\n        <video controls ref={player} src={source} className=\"video\">\r\n            {subtitles.map(url => (\r\n                <track key={url} label=\"Default\" kind=\"subtitles\" srclang=\"en\" src={url}></track>\r\n            ))}\r\n        </video>\r\n    );\r\n})\r\n\r\nexport default Player;","import React from 'react'\r\n\r\nfunction VideoSelector({onSelect}){\r\n\r\n    const onChange = (event) => {\r\n        onSelect(URL.createObjectURL(event.target.files[0]))\r\n    }\r\n\r\n    return (\r\n        <input onChange={onChange} type=\"file\" accept=\"video/*\" />\r\n    )\r\n}\r\n\r\nexport default VideoSelector;","import React from \"react\";\r\nimport VTTConverter from 'srt-webvtt'\r\n\r\nfunction SubtitlesSelector({onSelect}){\r\n\r\n    const onChange = async (event) => {\r\n\r\n        let file = event.target.files[0];\r\n\r\n        if(isSrt(file.name)){\r\n            const vttConverter = new VTTConverter(file)\r\n            onSelect(await vttConverter.getURL())\r\n        }else if (isVTT(file.name)){\r\n            let reader = new FileReader();\r\n            reader.readAsText(file, \"UTF-8\");\r\n            reader.onload = (evt) => {\r\n                let content = evt.target.result;\r\n                let blob = new Blob([content], {type: 'text/vtt'});\r\n                let file = URL.createObjectURL(blob);\r\n                onSelect(file);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const isSrt = (filename) =>\r\n    {\r\n        return filename.split('.').pop().toLowerCase() === 'srt' ? true : false;\r\n    }\r\n\r\n    const isVTT = (filename) =>\r\n    {\r\n        return filename.split('.').pop().toLowerCase() === 'vtt' ? true : false;\r\n    }\r\n\r\n    return (\r\n        <input onChange={onChange} type=\"file\" />\r\n    )\r\n}\r\n\r\nexport default SubtitlesSelector;","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Player from './components/Player';\nimport VideoSelector from './components/VideoSelector';\nimport SubtitlesSelector from './components/SubtitlesSelector';\nimport socketIOClient from \"socket.io-client\";\n//const ENDPOINT = \"http://192.168.0.87:8080\";\n\n\nfunction App() {\n\n  const [videoFile, setVideoFile] = useState();\n  const [subtitles, setSubtitles] = useState([]);\n  const player = useRef();\n  \n  let emitSeek = true;\n  let emitPlay = true;\n  let emitPause = true;\n\n  let socket;\n\n  useEffect(() => {\n    socket = socketIOClient();\n\n    socket.on('play', () => {\n      emitPlay = false;\n      player.current.play()\n    })\n\n    socket.on('pause', () => {\n      emitPause = false;\n      player.current.pause()\n    })\n\n    socket.on('seek', (time) => {\n      emitSeek = false;\n      player.current.seek(time)\n    })\n  }, []);  \n\n  const onSelectFile = (video) => {\n    setVideoFile(video);\n  }\n\n  const onAddSubtitle = (sub) => {\n    setSubtitles([sub])\n  }\n\n  const onTimeUpdate = (time) => {\n  }\n\n  const onPlay = () => {\n    if(emitPlay){\n        socket.emit(\"play\")\n    }\n    emitPlay = true\n  }\n\n  const onPause = () => {\n    if(emitPause){\n      socket.emit(\"pause\")\n    }\n    emitPause = true\n  }\n\n  const onSeek = (time) => {\n    if(emitSeek){\n      socket.emit(\"seek\", time)\n    }\n    emitSeek = true\n  }\n\n  return (\n    <div>\n      <VideoSelector onSelect={onSelectFile}></VideoSelector>\n      <SubtitlesSelector onSelect={onAddSubtitle}></SubtitlesSelector>\n      <Player ref={player} source={videoFile} subtitles={subtitles} onTimeUpdate={onTimeUpdate} onPlay={onPlay} onPause={onPause} onSeek={onSeek}></Player>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}